[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "digidig"
dynamic = ["version"]
description = "DIGiDIG - Distributed Email Infrastructure"
readme = "_doc/README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Pavel Perna", email = "pavel@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.115.0",
    "pydantic>=2.9",
    "uvicorn[standard]>=0.24.0",
    "asyncpg>=0.29",
    "aiohttp>=3.8.0",
    "pyyaml>=6.0",
    "pyjwt>=2.0",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.0",
    "aiosmtpd>=1.4.0",
    "python-dotenv>=1.0.0",
    "pymongo>=4.0",
]

[project.optional-dependencies]
test = [
    "pytest>=8.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0.0",
    "pytest-html>=3.1.0",
    "pytest-json-report>=1.5.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    "httpx>=0.24",
    "requests>=2.28",
]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

[project.urls]
Homepage = "https://github.com/PavelPerna/DIGiDIG"
Repository = "https://github.com/PavelPerna/DIGiDIG"
Documentation = "https://github.com/PavelPerna/DIGiDIG/blob/main/README.md"
"Bug Tracker" = "https://github.com/PavelPerna/DIGiDIG/issues"

[project.scripts]
digidig-test = "pytest:main"
digidig-format = "black:main"

[tool.setuptools_scm]
write_to = "version.py"

[tool.setuptools.packages.find]
include = ["common*"]
exclude = ["_test*", "_doc*", "services*", "assets*", "backups*", "locales*"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["_test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Default options for local development
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=.",
    "--cov-report=term-missing",
]
markers = [
    "unit: marks tests as unit tests (fast)",
    "integration: marks tests as integration tests (slow)", 
    "persistence: marks tests that check data persistence",
    "config: marks tests that check configuration",
    "auth: marks tests related to authentication", 
    "email: marks tests related to email functionality",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "docker: marks tests that require Docker services",
    "ci: marks tests suitable for CI environment",
    "local: marks tests that only work in local development",
    "fast: marks tests as fast (complete in <5 seconds)",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]
# Test collection
norecursedirs = [
    ".*",
    "build",
    "dist", 
    "*.egg",
    ".venv",
    "env*",
    "_test/htmlcov",
    "_test/reports",
    "backups",
]
# Async test support
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
omit = [
    "*/_test/*",
    "*/test_*",
    "*/*_test.py",
    "*/venv/*",
    "*/.venv/*", 
    "*/env/*",
    "*/.env/*",
    "*/_test/htmlcov/*",
    "*/_test/reports/*",
    "*/backups/*",
    "*/temp_extract/*",
    "setup.py",
    "conftest.py",
    "version.py",
    "*/__pycache__/*",
    "*/.*",
]
branch = true
parallel = true

[tool.coverage.report] 
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
]
precision = 2
show_missing = true
skip_covered = false
# CI requirements - optimized for unit tests 
fail_under = 75  # Realistic target based on current coverage

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = "_test/htmlcov"
show_contexts = true

[tool.black]
line-length = 127
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | venv
  | htmlcov
  | reports
  | backups
)/
'''

[tool.isort]
profile = "black"
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/venv/*", "*/.venv/*", "htmlcov/*", "reports/*"]

[tool.flake8]
max-line-length = 127
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv", 
    "_test/htmlcov",
    "_test/reports",
    "backups",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:F401,F811",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Enable gradually
disallow_incomplete_defs = false  # Enable gradually
check_untyped_defs = true
disallow_untyped_decorators = false  # Enable gradually 
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "venv/",
    ".venv/",
    "_test/htmlcov/",
    "_test/reports/",
    "backups/",
]