services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASS:-securepassword}
      - POSTGRES_DB=${DB_NAME:-strategos}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - strategos-net
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongo:
    image: mongo:6
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=strategos
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - strategos-net
    volumes:
      - mongo_data:/data/db

  identity:
    build:
      context: .
      dockerfile: ./identity/Dockerfile
    restart: unless-stopped
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DIGIDIG_ENV=${DIGIDIG_ENV:-dev}
    networks:
      - strategos-net

  smtp:
    build:
      context: .
      dockerfile: ./smtp/Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"   # FastAPI REST API
      - "2525:2525"   # SMTP server
    environment:
      - DIGIDIG_ENV=${DIGIDIG_ENV:-dev}
      - SMTP_SERVER_PORT=2525
    depends_on:
      - storage
      - identity
    networks:
      - strategos-net

  imap:
    build:
      context: .
      dockerfile: ./imap/Dockerfile
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      - DIGIDIG_ENV=${DIGIDIG_ENV:-dev}
    depends_on:
      - identity
      - storage
    networks:
      - strategos-net

  storage:
    build:
      context: .
      dockerfile: ./storage/Dockerfile
    restart: unless-stopped
    ports:
      - "8002:8002"
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - DIGIDIG_ENV=${DIGIDIG_ENV:-dev}
    networks:
      - strategos-net

  client:
    build:
      context: .
      dockerfile: ./client/Dockerfile
    restart: unless-stopped
    ports:
      - "8004:8004"
    environment:
      - DIGIDIG_ENV=${DIGIDIG_ENV:-dev}
    depends_on:
      - identity
      - smtp
      - imap
    networks:
      - strategos-net

  admin:
    build:
      context: .
      dockerfile: ./admin/Dockerfile
    restart: unless-stopped
    ports:
      - "8005:8005"
    environment:
      - DIGIDIG_ENV=${DIGIDIG_ENV:-dev}
    depends_on:
      - identity
    networks:
      - strategos-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker socket for restart functionality
      - ./:/app/project:ro  # Mount project root for docker-compose.yml access

  apidocs:
    build:
      context: .
      dockerfile: ./apidocs/Dockerfile
    restart: unless-stopped
    ports:
      - "8010:8010"
    environment:
      - DIGIDIG_ENV=${DIGIDIG_ENV:-dev}
      - IDENTITY_URL=http://identity:8001
      - STORAGE_URL=http://storage:8002
      - SMTP_URL=http://smtp:8000
      - IMAP_URL=http://imap:8003
      - CLIENT_URL=http://client:8004
      - ADMIN_URL=http://admin:8005
    depends_on:
      - identity
      - storage
      - smtp
      - imap
      - client
      - admin
    networks:
      - strategos-net

networks:
  strategos-net:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: