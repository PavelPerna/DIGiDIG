name: Release Management

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges $LAST_TAG..HEAD)
        fi
        
        # Save changelog to output
        {
          echo "changelog<<EOF"
          echo "$CHANGELOG"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: DIGiDIG ${{ github.ref_name }}
        body: |
          ## üöÄ DIGiDIG Release ${{ github.ref_name }}
          
          ### üìã Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### üê≥ Docker Images
          All services are available as Docker images:
          - `ghcr.io/${{ github.repository }}/identity:${{ github.ref_name }}`
          - `ghcr.io/${{ github.repository }}/storage:${{ github.ref_name }}`
          - `ghcr.io/${{ github.repository }}/smtp:${{ github.ref_name }}`
          - `ghcr.io/${{ github.repository }}/imap:${{ github.ref_name }}`
          - `ghcr.io/${{ github.repository }}/client:${{ github.ref_name }}`
          - `ghcr.io/${{ github.repository }}/admin:${{ github.ref_name }}`
          - `ghcr.io/${{ github.repository }}/apidocs:${{ github.ref_name }}`
          
          ### üìñ Deployment
          ```bash
          # Update docker-compose.yml with new version
          export DIGIDIG_VERSION=${{ github.ref_name }}
          docker-compose pull
          docker-compose up -d
          ```
          
          ### üß™ Testing
          All tests passing: ‚úÖ 9/9
          
          ### üìö Documentation
          - [API Documentation](http://localhost:8010)
          - [Localization Guide](./docs/LOCALIZATION.md)
          - [Configuration Guide](./docs/CONFIGURATION.md)
        draft: false
        prerelease: contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc')

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update version in documentation
      run: |
        # Update version references in README.md and docs
        sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-${GITHUB_REF_NAME#v}/g" README.md
        
        # Update docker-compose.prod.example.yml with new image tags
        find . -name "*.yml" -type f -exec sed -i "s/:main/:${GITHUB_REF_NAME}/g" {} +

    - name: Create documentation update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "docs: Update version references to ${{ github.ref_name }}"
        title: "üìö Update documentation for ${{ github.ref_name }}"
        body: |
          Automated update of version references in documentation after release ${{ github.ref_name }}.
          
          Changes:
          - Updated version badges in README.md
          - Updated Docker image tags in example files
        branch: update-docs-${{ github.ref_name }}
        delete-branch: true