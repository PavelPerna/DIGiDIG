name: Test Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - 'tests/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.py' 
      - 'tests/**'
      - 'pyproject.toml'
      - 'requirements*.txt'

env:
  PYTHONPATH: .
  PYTHONUNBUFFERED: 1

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]" || pip install -r _test/requirements-test.txt

    - name: Create reports directory
      run: mkdir -p reports

    - name: Run unit tests
      run: |
        python -m pytest _test/unit/ \
          -v \
          --tb=short \
          --cov=. \
          --cov-report=xml:coverage.xml \
          --cov-report=term \
          --junit-xml=reports/junit-unit.xml \
          --json-report \
          --json-report-file=reports/unit-report.json

    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          reports/junit-unit.xml
          reports/unit-report.json
          coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: securepassword
          POSTGRES_DB: strategos
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      mongo:
        image: mongo:6
        env:
          MONGO_INITDB_DATABASE: strategos
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Install Python dependencies  
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]" || pip install -r _test/requirements-test.txt

    - name: Create .env file for testing
      run: |
        cat > .env << EOF
        DB_USER=postgres
        DB_PASS=securepassword
        DB_NAME=strategos
        DB_HOST=localhost
        JWT_SECRET=test-jwt-secret-for-github-ci
        ADMIN_EMAIL=admin@example.com
        ADMIN_PASSWORD=admin
        DIGIDIG_ENV=test
        CI=true
        EOF

    - name: Build Docker images
      run: |
        docker-compose build

    - name: Start services
      run: |
        docker-compose up -d
        sleep 30

    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to be healthy..."
        timeout 120s bash -c 'until docker-compose ps | grep -q "healthy\|Up"; do sleep 5; done'
        docker-compose ps

    - name: Create reports directory
      run: mkdir -p reports

    - name: Run integration tests (fast only)
      run: |
        python -m pytest _test/integration/ \
          -v \
          --tb=short \
          -m "not slow" \
          --maxfail=5 \
          --junit-xml=reports/junit-integration.xml \
          --json-report \
          --json-report-file=reports/integration-report.json
      timeout-minutes: 15

    - name: Run configuration tests
      run: |
        python -m pytest _test/integration/test_all_services_config.py \
          -v \
          --tb=short \
          --junit-xml=reports/junit-config.xml
      timeout-minutes: 10

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== Service Status ==="
        docker-compose ps
        echo "=== Identity Service Logs ==="
        docker-compose logs identity | tail -50
        echo "=== SMTP Service Logs ==="
        docker-compose logs smtp | tail -50
        echo "=== Storage Service Logs ==="
        docker-compose logs storage | tail -50

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          reports/junit-integration.xml
          reports/junit-config.xml
          reports/integration-report.json

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        path: test-results

    - name: Display test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f test-results/unit-test-results/reports/junit-unit.xml ]; then
          echo "✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit tests failed or missing" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f test-results/integration-test-results/reports/junit-integration.xml ]; then
          echo "✅ Integration tests completed" >> $GITHUB_STEP_SUMMARY  
        else
          echo "❌ Integration tests failed or missing" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 Test artifacts have been uploaded and are available for download." >> $GITHUB_STEP_SUMMARY

    - name: Fail if any test job failed
      if: needs.test-unit.result == 'failure' || needs.test-integration.result == 'failure'
      run: |
        echo "One or more test jobs failed"
        exit 1