name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: securepassword
          POSTGRES_DB: strategos
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      mongo:
        image: mongo:6
        env:
          MONGO_INITDB_DATABASE: strategos
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Create .env file for testing
      run: |
        cat > .env << EOF
        DB_USER=postgres
        DB_PASS=securepassword
        DB_NAME=strategos
        DB_HOST=localhost
        JWT_SECRET=test-jwt-secret-for-github-ci
        ADMIN_EMAIL=admin@example.com
        ADMIN_PASSWORD=admin
        DIGIDIG_ENV=test
        EOF

    - name: Build Docker images
      run: |
        docker-compose build

    - name: Start services
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to start

    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to be healthy..."
        timeout 120s bash -c 'until docker-compose ps | grep -q "healthy\|Up"; do sleep 5; done'
        docker-compose ps

    - name: Run integration tests
      run: |
        make test-ci
      timeout-minutes: 15

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== Identity Service Logs ==="
        docker-compose logs identity
        echo "=== SMTP Service Logs ==="
        docker-compose logs smtp
        echo "=== Storage Service Logs ==="
        docker-compose logs storage
        echo "=== Docker Compose Status ==="
        docker-compose ps

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run Black (code formatting check)
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff .
      continue-on-error: true

    - name: Run Flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true