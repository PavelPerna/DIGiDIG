name: CD - Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI - Continuous Integration"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [identity, storage, smtp, imap, client, admin, apidocs]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: staging
      url: http://staging.digidig.local

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "This would typically:"
        echo "1. Connect to staging server"
        echo "2. Pull latest images from registry"
        echo "3. Update docker-compose with new image tags"
        echo "4. Run docker-compose up -d"
        echo "5. Run health checks"
        echo "6. Send notifications"
        
        # Example staging deployment (would be customized for actual infrastructure)
        # ssh staging-server 'cd /opt/digidig && docker-compose pull && docker-compose up -d'

    - name: Run staging health checks
      run: |
        echo "ðŸ©º Running health checks..."
        echo "This would check all service endpoints are responding"
        # curl -f http://staging.digidig.local/api/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: https://digidig.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "Version: ${{ github.ref_name }}"
        echo "This would typically:"
        echo "1. Connect to production server"
        echo "2. Create backup of current deployment"
        echo "3. Pull versioned images from registry"
        echo "4. Update docker-compose with new image tags"
        echo "5. Run blue-green deployment"
        echo "6. Run comprehensive health checks"
        echo "7. Send notifications to team"
        
        # Example production deployment
        # ssh production-server 'cd /opt/digidig && ./deploy.sh ${{ github.ref_name }}'

    - name: Run production health checks
      run: |
        echo "ðŸ©º Running production health checks..."
        echo "This would run comprehensive tests against production"
        # ./scripts/production-health-check.sh

    - name: Notify team
      run: |
        echo "ðŸ“¢ Notifying team of successful deployment"
        echo "Deployed version ${{ github.ref_name }} to production"
        # Send Slack/email notifications

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    
    steps:
    - name: Cleanup old container images
      run: |
        echo "ðŸ§¹ Cleaning up old container images..."
        echo "This would remove images older than 30 days from registry"
        # Use GitHub API to delete old packages