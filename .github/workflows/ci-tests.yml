name: DIGiDIG CI Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - 'tests/**'
      - 'pyproject.toml'
      - '**/requirements*.txt'
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONPATH: .
  PYTHONUNBUFFERED: 1

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r _test/requirements-test.txt
        
    - name: Run unit tests
      run: |
        python -m pytest _test/unit/ -v --tb=short
        
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          pytest-report.html
          pytest-report.json
        retention-days: 7

  integration-tests:
    name: Integration Tests  
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: digidig
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      mongo:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: mongo
          MONGO_INITDB_ROOT_PASSWORD: mongo
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r _test/requirements-test.txt
        
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
        
    - name: Create .env file
      run: |
        cat > .env << EOF
        DIGIDIG_ENV=test
        POSTGRES_HOST=localhost
        POSTGRES_PASSWORD=postgres
        MONGO_HOST=localhost
        MONGO_PASSWORD=mongo
        JWT_SECRET=test-secret-for-ci
        EOF
        
    - name: Build and start services
      run: |
        docker-compose build
        docker-compose up -d
        sleep 30
        
    - name: Wait for services
      run: |
        timeout 120 bash -c 'until docker-compose ps | grep -q "healthy\|Up"; do sleep 5; done'
        docker-compose ps
        
    - name: Run integration tests
      env:
        DIGIDIG_ENV: test
      run: |
        python -m pytest _test/integration/ -v --tb=short -m "not slow"
      timeout-minutes: 15
        
    - name: Show logs on failure
      if: failure()
      run: |
        docker-compose logs identity | tail -50
        docker-compose logs smtp | tail -50
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          pytest-report.html
          pytest-report.json
        retention-days: 7

  full-coverage:
    name: Full Test Suite with Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: digidig
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      mongo:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: mongo
          MONGO_INITDB_ROOT_PASSWORD: mongo
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r _test/requirements-test.txt
        
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
        
    - name: Create .env file
      run: |
        cat > .env << EOF
        DIGIDIG_ENV=test
        POSTGRES_HOST=localhost
        POSTGRES_PASSWORD=postgres
        MONGO_HOST=localhost
        MONGO_PASSWORD=mongo
        JWT_SECRET=test-secret-for-ci
        EOF
        
    - name: Build and start services
      run: |
        docker-compose build
        docker-compose up -d
        sleep 30
        
    - name: Wait for services
      run: |
        timeout 120 bash -c 'until docker-compose ps | grep -q "healthy\|Up"; do sleep 5; done'
        
    - name: Run full test suite with coverage
      env:
        DIGIDIG_ENV: test
      run: |
        python -m pytest _test/ -v --tb=short --cov=. --cov-report=xml --cov-report=term
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
          pytest-report.html
          pytest-report.json
        retention-days: 30